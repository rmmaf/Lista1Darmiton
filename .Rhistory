k_proximos <- function(instance, examples, k, classCol){
x <- examples[,-classCol]
y <- examples[,classCol]
#dists <- apply(x, 1, function(x) euclidian(x, instance))[[1]]
dists <- c()
classe <- c()
for (i in 1:nrow(x)) {
dists <- append(dists, dist(rbind(x[i,], instance)))
classe <- append(classe, y[i])
}
df <- data.frame(classe = classe, dists = dists)
df <- df[order(df$dists),]
#orderDists <- sort(dists, index.return = TRUE)$ix
proximos <- as.vector(as.numeric(rownames(df[1:k,])))
candidates <- y[as.numeric(proximos)]
result <- moda(candidates)
return(result)
}
k_proximos(df[1,-22], train, 5, 22)
k_proximos <- function(instance, examples, k, classCol){
x <- examples[,-classCol]
y <- examples[,classCol]
#dists <- apply(x, 1, function(x) euclidian(x, instance))[[1]]
dists <- c()
classe <- c()
for (i in 1:nrow(x)) {
dists <- append(dists, dist(rbind(x[i,], instance)))
classe <- append(classe, y[i])
}
df <- data.frame(classe = classe, dists = dists)
df <- df[order(df$dists),]
#orderDists <- sort(dists, index.return = TRUE)$ix
proximos <- as.vector(as.numeric(rownames(df[1:k,])))
candidates <- y[as.numeric(proximos)]
print(candidates)
result <- moda(candidates)
return(result)
}
k_proximos(df[1,-22], train, 5, 22)
library(foreign)
library(caTools)
moda <- function(v) {
uniqv <- unique(v)
return(uniqv[which.max(tabulate(match(v, uniqv)))])
}
divideInstances <- function(df, fraction){
smp_size <- floor(fraction * nrow(df))
set.seed(123)
train_ind <- sample(seq_len(nrow(df)), size = smp_size)
train <- df[train_ind, ]
test <- df[-train_ind, ]
return(list(train, test))
}
k_proximos <- function(instance, examples, k, classCol){
x <- examples[,-classCol]
y <- examples[,classCol]
dists <- c()
classe <- c()
for (i in 1:nrow(x)) {
dists <- append(dists, dist(rbind(x[i,], instance)))
classe <- append(classe, y[i])
}
df <- data.frame(classe = classe, dists = dists)
df <- df[order(df$dists),]
proximos <- as.vector(as.numeric(rownames(df[1:k,])))
candidates <- y[as.numeric(proximos)]
print(candidates)
result <- moda(candidates)
return(result)
}
df <- read.arff("arquivos/deffects2.arff")
df[,22] <- gsub("false", FALSE, df[,22])
df[,22] <- gsub("true", TRUE, df[,22])
df[,22] <- as.logical(df[,22])
train <- divideInstances(df, 0.75)[[1]]
test <- divideInstances(df, 0.75)[[2]]
predictions <- apply(test[,-22], 1, function(x) k_proximos(x, train, 5, 22))
View(predictions)
testy <- test[,22]
dif <- predictions == testy
sum(dif)/length(predictions)
View(dif)
library(foreign)
library(caTools)
moda <- function(v) {
uniqv <- unique(v)
return(uniqv[which.max(tabulate(match(v, uniqv)))])
}
divideInstances <- function(df, fraction){
smp_size <- floor(fraction * nrow(df))
set.seed(123)
train_ind <- sample(seq_len(nrow(df)), size = smp_size)
train <- df[train_ind, ]
test <- df[-train_ind, ]
return(list(train, test))
}
k_proximos <- function(instance, examples, k, classCol){
x <- examples[,-classCol]
y <- examples[,classCol]
dists <- c()
classe <- c()
for (i in 1:nrow(x)) {
dists <- append(dists, dist(rbind(x[i,], instance)))
classe <- append(classe, y[i])
}
df <- data.frame(classe = classe, dists = dists)
df <- df[order(df$dists),]
proximos <- as.vector(as.numeric(rownames(df[1:k,])))
candidates <- y[as.numeric(proximos)]
print(candidates)
result <- moda(candidates)
return(result)
}
df <- read.arff("arquivos/deffects2.arff")
df[,22] <- gsub("false", FALSE, df[,22])
df[,22] <- gsub("true", TRUE, df[,22])
df[,22] <- as.logical(df[,22])
train <- divideInstances(df, 0.75)[[1]]
test <- divideInstances(df, 0.75)[[2]]
calculateKnnAccuracy <- function(k, test, train, classCol){
predictions <- apply(test[,-classCol], 1, function(x) k_proximos(x, train, k, classCol))
testy <- test[,22]
dif <- predictions == testy
return(sum(dif)/length(predictions))
}
calculateKnnAccuracy(5, test, train, 22)
library(foreign)
library(caTools)
moda <- function(v) {
uniqv <- unique(v)
return(uniqv[which.max(tabulate(match(v, uniqv)))])
}
divideInstances <- function(df, fraction){
smp_size <- floor(fraction * nrow(df))
set.seed(123)
train_ind <- sample(seq_len(nrow(df)), size = smp_size)
train <- df[train_ind, ]
test <- df[-train_ind, ]
return(list(train, test))
}
k_proximos <- function(instance, examples, k, classCol){
x <- examples[,-classCol]
y <- examples[,classCol]
dists <- c()
classe <- c()
for (i in 1:nrow(x)) {
dists <- append(dists, dist(rbind(x[i,], instance)))
classe <- append(classe, y[i])
}
df <- data.frame(classe = classe, dists = dists)
df <- df[order(df$dists),]
proximos <- as.vector(as.numeric(rownames(df[1:k,])))
candidates <- y[as.numeric(proximos)]
result <- moda(candidates)
return(result)
}
df <- read.arff("arquivos/deffects2.arff")
df[,22] <- gsub("false", FALSE, df[,22])
df[,22] <- gsub("true", TRUE, df[,22])
df[,22] <- as.logical(df[,22])
train <- divideInstances(df, 0.75)[[1]]
test <- divideInstances(df, 0.75)[[2]]
calculateKnnAccuracy <- function(k, test, train, classCol){
predictions <- apply(test[,-classCol], 1, function(x) k_proximos(x, train, k, classCol))
testy <- test[,22]
dif <- predictions == testy
return(sum(dif)/length(predictions))
}
calculateKnnAccuracy(5, test, train, 22)
calculateKnnAccuracy(9, test, train, 22)
library(foreign)
library(caTools)
moda <- function(v) {
uniqv <- unique(v)
return(uniqv[which.max(tabulate(match(v, uniqv)))])
}
get_weighted <- function(labels,weights) {
dset = data.frame(labels=factor(labels),
weights=weights)
scores = aggregate(. ~ labels, dset, sum)
result = as.character(scores$labels[which.max(scores$weights)])
return(result)
}
divideInstances <- function(df, fraction){
smp_size <- floor(fraction * nrow(df))
set.seed(123)
train_ind <- sample(seq_len(nrow(df)), size = smp_size)
train <- df[train_ind, ]
test <- df[-train_ind, ]
return(list(train, test))
}
pesosk_proximos <- function(instance, examples, k, classCol){
x <- examples[,-classCol]
y <- examples[,classCol]
dists <- c()
classe <- c()
for (i in 1:nrow(x)) {
dists <- append(dists, dist(rbind(x[i,], instance)))
classe <- append(classe, y[i])
}
if (any(dists==0)) {
ind <- which(dists==0)
res <- moda(y[ind])
return(res)
}else {
proximidade <- 1/dists
df <- data.frame(classe = classe, dists = dists)
df <- df[order(df$dists),]
proximos <- as.vector(as.numeric(rownames(df[1:k,])))
candidates <- y[as.numeric(proximos)]
pesos <- proximidades[as.numeric(proximos)]
result <- get_weighted(candidates,pesos)
return(result)
}
}
df <- read.arff("arquivos/deffects2.arff")
df[,22] <- gsub("false", FALSE, df[,22])
df[,22] <- gsub("true", TRUE, df[,22])
df[,22] <- as.logical(df[,22])
train <- divideInstances(df, 0.75)[[1]]
test <- divideInstances(df, 0.75)[[2]]
calculateKnnAccuracy <- function(k, test, train, classCol){
predictions <- apply(test[,-classCol], 1, function(x) pesosk_proximos(x, train, k, classCol))
testy <- test[,22]
dif <- predictions == testy
return(sum(dif)/length(predictions))
}
library(foreign)
library(caTools)
moda <- function(v) {
uniqv <- unique(v)
return(uniqv[which.max(tabulate(match(v, uniqv)))])
}
get_weighted <- function(labels,weights) {
dset = data.frame(labels=factor(labels),
weights=weights)
scores = aggregate(. ~ labels, dset, sum)
result = as.character(scores$labels[which.max(scores$weights)])
return(result)
}
divideInstances <- function(df, fraction){
smp_size <- floor(fraction * nrow(df))
set.seed(123)
train_ind <- sample(seq_len(nrow(df)), size = smp_size)
train <- df[train_ind, ]
test <- df[-train_ind, ]
return(list(train, test))
}
pesosk_proximos <- function(instance, examples, k, classCol){
x <- examples[,-classCol]
y <- examples[,classCol]
dists <- c()
classe <- c()
for (i in 1:nrow(x)) {
dists <- append(dists, dist(rbind(x[i,], instance)))
classe <- append(classe, y[i])
}
if (any(dists==0)) {
ind <- which(dists==0)
res <- moda(y[ind])
return(res)
}else {
proximidade <- 1/dists
df <- data.frame(classe = classe, dists = dists)
df <- df[order(df$dists),]
proximos <- as.vector(as.numeric(rownames(df[1:k,])))
candidates <- y[as.numeric(proximos)]
pesos <- proximidades[as.numeric(proximos)]
result <- get_weighted(candidates,pesos)
return(result)
}
}
df <- read.arff("arquivos/deffects2.arff")
df[,22] <- gsub("false", FALSE, df[,22])
df[,22] <- gsub("true", TRUE, df[,22])
df[,22] <- as.logical(df[,22])
train <- divideInstances(df, 0.75)[[1]]
test <- divideInstances(df, 0.75)[[2]]
calculatePesoKnnAccuracy <- function(k, test, train, classCol){
predictions <- apply(test[,-classCol], 1, function(x) pesosk_proximos(x, train, k, classCol))
testy <- test[,22]
dif <- predictions == testy
return(sum(dif)/length(predictions))
}
calculatePesoKnnAccuracy(5, test, train, 22)
library(foreign)
library(caTools)
moda <- function(v) {
uniqv <- unique(v)
return(uniqv[which.max(tabulate(match(v, uniqv)))])
}
get_weighted <- function(labels,weights) {
dset = data.frame(labels=factor(labels),
weights=weights)
scores = aggregate(. ~ labels, dset, sum)
result = as.character(scores$labels[which.max(scores$weights)])
return(result)
}
divideInstances <- function(df, fraction){
smp_size <- floor(fraction * nrow(df))
set.seed(123)
train_ind <- sample(seq_len(nrow(df)), size = smp_size)
train <- df[train_ind, ]
test <- df[-train_ind, ]
return(list(train, test))
}
pesosk_proximos <- function(instance, examples, k, classCol){
x <- examples[,-classCol]
y <- examples[,classCol]
dists <- c()
classe <- c()
for (i in 1:nrow(x)) {
dists <- append(dists, dist(rbind(x[i,], instance)))
classe <- append(classe, y[i])
}
if (any(dists==0)) {
ind <- which(dists==0)
res <- moda(y[ind])
return(res)
}else {
proximidade <- 1/dists
df <- data.frame(classe = classe, dists = dists)
df <- df[order(df$dists),]
proximos <- as.vector(as.numeric(rownames(df[1:k,])))
candidates <- y[as.numeric(proximos)]
pesos <- proximidade[as.numeric(proximos)]
result <- get_weighted(candidates,pesos)
return(result)
}
}
df <- read.arff("arquivos/deffects2.arff")
df[,22] <- gsub("false", FALSE, df[,22])
df[,22] <- gsub("true", TRUE, df[,22])
df[,22] <- as.logical(df[,22])
train <- divideInstances(df, 0.75)[[1]]
test <- divideInstances(df, 0.75)[[2]]
calculatePesoKnnAccuracy <- function(k, test, train, classCol){
predictions <- apply(test[,-classCol], 1, function(x) pesosk_proximos(x, train, k, classCol))
testy <- test[,22]
dif <- predictions == testy
return(sum(dif)/length(predictions))
}
calculatePesoKnnAccuracy(5, test, train, 22)
library(foreign)
library(caTools)
moda <- function(v) {
uniqv <- unique(v)
return(uniqv[which.max(tabulate(match(v, uniqv)))])
}
divideInstances <- function(df, fraction){
smp_size <- floor(fraction * nrow(df))
set.seed(123)
train_ind <- sample(seq_len(nrow(df)), size = smp_size)
train <- df[train_ind, ]
test <- df[-train_ind, ]
return(list(train, test))
}
adaptivek_proximos <- function(instance, examples, k, classCol, raios){
x <- examples[,-classCol]
y <- examples[,classCol]
dists <- c()
classe <- c()
for (i in 1:nrow(x)) {
dists <- append(dists, dist(rbind(x[i,], instance)))
classe <- append(classe, y[i])
}
df <- data.frame(classe = classe, dists = dists)
df <- df[order(df$dists),]
proximos <- as.vector(as.numeric(rownames(df[1:k,])))
candidates <- y[as.numeric(proximos)]
result <- moda(candidates)
return(result)
}
df <- read.arff("arquivos/deffects2.arff")
df[,22] <- gsub("false", FALSE, df[,22])
df[,22] <- gsub("true", TRUE, df[,22])
df[,22] <- as.logical(df[,22])
train <- divideInstances(df, 0.75)[[1]]
test <- divideInstances(df, 0.75)[[2]]
adaptiveRule <- function(train, colClass){
radius <- c()
for (i in 1:length(train)) {
aux <- c()
for (j in 1:length(train)) {
if(train[i, colClass] != train[j, colClass])
distancia <- dist(rbind(train[i, -colClass], train[j, -colClass])) - 0.00000000001
if(distancia >= 0){
aux <- append(aux, distancia)
}
}
radius <- append(radius, min(aux))
}
return(radius)
}
adaptiveKnnAccuracy <- function(k, test, train, classCol){
predictions <- apply(test[,-classCol], 1, function(x) k_proximos(x, train, k, classCol))
testy <- test[,22]
dif <- predictions == testy
return(sum(dif)/length(predictions))
}
adaptiveRule(train, 22)
adaptiveRule <- function(train, colClass){
radius <- c()
for (i in 1:length(train)) {
aux <- c()
for (j in 1:length(train)) {
if(train[i, colClass] != train[j, colClass])
distancia <- dist(rbind(train[i, -colClass], train[j, -colClass])) - 0.00000000001
print(distancia)
if(distancia >= 0){
aux <- append(aux, distancia)
}
}
radius <- append(radius, min(aux))
}
return(radius)
}
adaptiveRule(train, 22)
adaptiveRule <- function(train, colClass){
radius <- c()
for (i in 1:length(train)) {
aux <- c()
for (j in 1:length(train)) {
if(train[i, colClass] != train[j, colClass]){
distancia <- dist(rbind(train[i, -colClass], train[j, -colClass])) - 0.00000000001
if(distancia >= 0){
aux <- append(aux, distancia)
}
}
}
radius <- append(radius, min(aux))
}
return(radius)
}
adaptiveRule(train, 22)
adaptiveRule <- function(train, colClass){
radius <- c()
for (i in 1:nrow(train)) {
aux <- c()
for (j in 1:nrow(train)) {
if(train[i, colClass] != train[j, colClass]){
distancia <- dist(rbind(train[i, -colClass], train[j, -colClass])) - 0.00000000001
if(distancia >= 0){
aux <- append(aux, distancia)
}
}
}
radius <- append(radius, min(aux))
}
return(radius)
}
adaptiveRule(train, 22)
library(foreign)
library(caTools)
moda <- function(v) {
uniqv <- unique(v)
return(uniqv[which.max(tabulate(match(v, uniqv)))])
}
divideInstances <- function(df, fraction){
smp_size <- floor(fraction * nrow(df))
set.seed(123)
train_ind <- sample(seq_len(nrow(df)), size = smp_size)
train <- df[train_ind, ]
test <- df[-train_ind, ]
return(list(train, test))
}
adaptivek_proximos <- function(instance, train, k, classCol, raios){
x <- train[,-classCol]
y <- train[,classCol]
dists <- c()
classe <- c()
radius <- adaptiveRule(train, classCol)
for (i in 1:nrow(x)) {
dists <- append(dists, dist(rbind(x[i,], instance))/radius[i])
classe <- append(classe, y[i])
}
df <- data.frame(classe = classe, dists = dists)
df <- df[order(df$dists),]
proximos <- as.vector(as.numeric(rownames(df[1:k,])))
candidates <- y[as.numeric(proximos)]
result <- moda(candidates)
return(result)
}
df <- read.arff("arquivos/deffects2.arff")
df[,22] <- gsub("false", FALSE, df[,22])
df[,22] <- gsub("true", TRUE, df[,22])
df[,22] <- as.logical(df[,22])
train <- divideInstances(df, 0.75)[[1]]
test <- divideInstances(df, 0.75)[[2]]
adaptiveRule <- function(train, colClass){
radius <- c()
for (i in 1:nrow(train)) {
aux <- c()
for (j in 1:nrow(train)) {
if(train[i, colClass] != train[j, colClass]){
distancia <- dist(rbind(train[i, -colClass], train[j, -colClass])) - 0.00000000001
if(distancia >= 0){
aux <- append(aux, distancia)
}
}
}
radius <- append(radius, min(aux))
}
return(radius)
}
adaptiveKnnAccuracy <- function(k, test, train, classCol){
predictions <- apply(test[,-classCol], 1, function(x) adaptivek_proximos(x, train, k, classCol))
testy <- test[,22]
dif <- predictions == testy
return(sum(dif)/length(predictions))
}
adaptiveKnnAccuracy(5, test, train, 22)
